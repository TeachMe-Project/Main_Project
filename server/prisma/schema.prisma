generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  user_id    String  @db.VarChar(100)
  admin_id   Int     @id @default(autoincrement())
  first_name String  @db.VarChar(255)
  last_name  String  @db.VarChar(255)
  mobile_no  String  @db.VarChar(12)
  isActive   Boolean
  user       user    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "FK TO ADMIN FROM USER")

  @@index([user_id], map: "FK TO ADMIN FROM USER")
}

model course {
  course_id        Int                @id @default(autoincrement())
  teacher_id       Int
  course_name      String             @db.VarChar(100)
  grade            String             @db.VarChar(3)
  subject          String             @db.VarChar(100)
  description      String             @db.VarChar(255)
  duration         Int
  start_date       DateTime           @db.Date
  start_time       DateTime           @db.Time(0)
  end_time         DateTime           @db.Time(0)
  day              course_day
  medium           course_medium
  price            Int
  isActive         Boolean
  created_date     String             @db.VarChar(100)
  teacher          teacher            @relation(fields: [teacher_id], references: [teacher_id], onDelete: NoAction, map: "FK TO COURSE FROM TEACHER")
  homework         homework[]
  institute_course institute_course[]
  notes            notes[]
  student_class    student_class[]
  student_course   student_course[]
  student_payment  student_payment[]
  teacher_class    teacher_class[]

  @@index([teacher_id], map: "FK TO COURSE FROM TEACHER")
}

model homework {
  homework_id   Int      @id @default(autoincrement())
  student_id    Int
  course_id     Int
  uploaded_date DateTime @default(now()) @db.Date
  homework      String   @db.VarChar(1000)
  isActive      Boolean
  course        course   @relation(fields: [course_id], references: [course_id], onDelete: Cascade, map: "FK TO HOMEWORK FROM COURSE")
  student       student  @relation(fields: [student_id], references: [student_id], onDelete: Cascade, map: "FK TO HOMEWORK FROM STUDENT")

  @@index([course_id], map: "FK TO HOMEWORK FROM COURSE")
  @@index([student_id], map: "FK TO HOMEWORK FROM STUDENT")
}

model institute {
  user_id           String                 @unique(map: "user_id") @db.VarChar(100)
  institute_id      Int                    @id @default(autoincrement())
  institute_name    String                 @db.VarChar(255)
  owner_name        String                 @db.VarChar(150)
  location          String                 @db.VarChar(300)
  address           String                 @db.VarChar(500)
  contact_no        String                 @db.VarChar(12)
  description       String                 @db.VarChar(1000)
  account_name      String                 @db.VarChar(100)
  account_no        String                 @db.VarChar(20)
  bank_name         String                 @db.VarChar(100)
  branch_name       String                 @db.VarChar(100)
  isActive          Boolean
  verification_code String                 @db.VarChar(10)
  verification      institute_verification @default(pending)
  applied_date      String                 @db.VarChar(30)
  user              user                   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "FK TO INSTITUTE FROM USER")
  institute_course  institute_course[]
  institute_teacher institute_teacher[]
  teacher_requests  teacher_requests[]

  @@index([user_id], map: "FK TO INSTITUTE FROM USER")
}

model institute_course {
  institute_id Int
  course_id    Int
  isActive     Boolean
  course       course    @relation(fields: [course_id], references: [course_id], onDelete: NoAction, map: "FK TO INS_CO FROM COURSE")
  institute    institute @relation(fields: [institute_id], references: [institute_id], onDelete: NoAction, map: "FK TO INS_CO FROM INSTITUTE")

  @@id([institute_id, course_id])
  @@index([course_id], map: "FK TO INS_CO FROM COURSE")
  @@index([institute_id], map: "FK TO INS_CO FROM INSTITUTE")
}

model institute_teacher {
  institute_id Int
  teacher_id   Int
  status       institute_teacher_status
  isActive     Boolean
  institute    institute                @relation(fields: [institute_id], references: [institute_id], onDelete: Cascade, map: "institute_teacher_ibfk_1")
  teacher      teacher                  @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade, map: "institute_teacher_ibfk_2")

  @@id([institute_id, teacher_id])
  @@index([teacher_id], map: "teacher_id")
}

model notes {
  note_id       Int      @id @default(autoincrement())
  uploaded_date DateTime @default(now()) @db.Date
  note          String   @db.VarChar(1000)
  course_id     Int
  student_id    Int
  isActive      Boolean
  course        course   @relation(fields: [course_id], references: [course_id], onDelete: Cascade, map: "FK TO NOTE FROM COURSE")
  student       student  @relation(fields: [student_id], references: [student_id], onDelete: Cascade, map: "FK TO NOTE FROM STUDENT")

  @@index([course_id], map: "FK TO NOTE FROM COURSE")
  @@index([student_id], map: "FK TO NOTE FROM STUDENT")
}

model notification {
  user_id         String                   @db.VarChar(100)
  notification_id Int                      @id @default(autoincrement())
  subject         String                   @db.VarChar(300)
  description     String                   @db.VarChar(10000)
  read_status     notification_read_status @default(unread)
  isActive        Boolean
  user            user                     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "FK TO NOTIFICATION FROM USER")

  @@index([user_id], map: "FK TO NOTIFICATION FROM USER")
}

model parent {
  user_id    String    @db.VarChar(100)
  parent_id  Int       @id @default(autoincrement())
  first_name String    @db.VarChar(100)
  last_name  String    @db.VarChar(100)
  mobile_no  String    @db.VarChar(12)
  isActive   Boolean
  user       user      @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "FK TO PARENT FROM USER")
  student    student[]

  @@index([user_id], map: "FK TO PARENT FROM USER")
}

model parent_payment {
  payment_id      Int                  @id @default(autoincrement())
  payment_time    DateTime             @default(now()) @db.Timestamp(0)
  amount          Int
  student_id      Int
  month           parent_payment_month
  year            Int
  isActive        Boolean
  student         student              @relation(fields: [student_id], references: [student_id], onDelete: Cascade, map: "FK TO PARENT_PAYMENT FROM STUDENT")
  student_payment student_payment?

  @@index([student_id], map: "FK TO PARENT_PAYMENT FROM STUDENT")
}

model student {
  user_id         String            @db.VarChar(100)
  student_id      Int               @id @default(autoincrement())
  parent_id       Int
  first_name      String            @db.VarChar(30)
  last_name       String            @db.VarChar(30)
  school          String            @db.VarChar(100)
  grade           String            @db.VarChar(3)
  isActive        Boolean
  parent          parent            @relation(fields: [parent_id], references: [parent_id], onDelete: Cascade, map: "FK TO STUDENT FROM PARENT")
  user            user              @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "FK TO STUDENT FROM USER")
  homework        homework[]
  notes           notes[]
  parent_payment  parent_payment[]
  student_class   student_class[]
  student_course  student_course[]
  student_payment student_payment[]

  @@index([parent_id], map: "FK TO STUDENT FROM PARENT")
  @@index([user_id], map: "FK TO STUDENT FROM USER")
}

model student_course {
  student_id Int
  course_id  Int
  isActive   Boolean
  status     student_course_status
  course     course                @relation(fields: [course_id], references: [course_id], onDelete: NoAction, map: "FK TO STU_CO FROM COURSE")
  student    student               @relation(fields: [student_id], references: [student_id], onDelete: Cascade, map: "FK TO STU_CO FROM STUDENT")

  @@id([student_id, course_id])
  @@index([course_id], map: "FK TO STU_CO FROM COURSE")
}

model student_payment {
  payment_id     Int                            @id @default(autoincrement())
  student_id     Int
  course_id      Int
  month          student_payment_month
  payment_status student_payment_payment_status
  isActive       Boolean
  course         course                         @relation(fields: [course_id], references: [course_id], onUpdate: Restrict, map: "FK TO STUDENT_PAYMENT FROM COURSE")
  parent_payment parent_payment                 @relation(fields: [payment_id], references: [payment_id], onUpdate: Restrict, map: "FK TO STUDENT_PAYMENT FROM PARENT_PAYMENT")
  student        student                        @relation(fields: [student_id], references: [student_id], onDelete: Cascade, map: "FK TO STUDENT_PAYMENT FROM STUDENT")

  @@index([course_id], map: "FK TO STUDENT_PAYMENT FROM COURSE")
  @@index([student_id], map: "FK TO STUDENT_PAYMENT FROM STUDENT")
}

model teacher {
  user_id           String               @unique(map: "user_id") @db.VarChar(100)
  teacher_id        Int                  @id @default(autoincrement())
  first_name        String               @db.VarChar(30)
  last_name         String               @db.VarChar(30)
  contact_no        String               @db.VarChar(15)
  gender            teacher_gender
  description       String               @db.VarChar(255)
  qualification     String               @db.VarChar(255)
  account_name      String               @db.VarChar(255)
  bank_name         String               @db.VarChar(255)
  branch_name       String               @db.VarChar(100)
  account_no        String               @db.VarChar(20)
  verification      teacher_verification
  isActive          Boolean
  applied_date      String               @db.VarChar(30)
  user              user                 @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "FK TO TEACHER FROM USER")
  course            course[]
  institute_teacher institute_teacher[]
  teacher_class     teacher_class[]
  teacher_requests  teacher_requests[]
}

model teacher_requests {
  institute_id   Int
  teacher_id     Int
  request_status teacher_requests_request_status @default(pending)
  date           DateTime                        @default(now()) @db.Timestamp(0)
  isActive       Boolean
  institute      institute                       @relation(fields: [institute_id], references: [institute_id], onUpdate: Restrict, map: "FK_instituteID_to_institute")
  teacher        teacher                         @relation(fields: [teacher_id], references: [teacher_id], onUpdate: Restrict, map: "FK_teacherID_to_teacher")

  @@id([institute_id, teacher_id, date])
  @@index([teacher_id], map: "FK_teacherID_to_teacher")
}

model user {
  user_id       String         @id @db.VarChar(100)
  username      String         @db.VarChar(100)
  type          user_type      @default(student)
  profile_image String         @db.VarChar(255)
  isActive      Boolean
  admin         admin[]
  institute     institute?
  notification  notification[]
  parent        parent[]
  student       student[]
  teacher       teacher?
}

model student_class {
  class_id      Int                         @id @default(autoincrement())
  course_id     Int
  student_id    Int
  date          DateTime                    @default(now()) @db.Timestamp(0)
  start_time    String                      @db.VarChar(100)
  end_time      String                      @default(dbgenerated("(current_timestamp())")) @db.VarChar(100)
  status        student_class_status        @default(upcoming)
  joined_time   DateTime                    @default(now()) @db.Timestamp(0)
  left_time     DateTime                    @default(now()) @db.Timestamp(0)
  online_status student_class_online_status
  isActive      Boolean
  isStarted     Boolean                     @default(false)
  course        course                      @relation(fields: [course_id], references: [course_id], onDelete: Cascade, map: "FK TO CLASS FROM COURSE")
  student       student                     @relation(fields: [student_id], references: [student_id], onDelete: Cascade, map: "FK TO CLASS FROM STUDENT")

  @@index([course_id], map: "FK TO CLASS FROM COURSE")
  @@index([student_id], map: "FK TO CLASS FROM STUDENT")
}

model teacher_class {
  class_id   Int      @id @default(autoincrement())
  course_id  Int
  teacher_id Int
  date       DateTime @default(now()) @db.Timestamp(0)
  start_time String   @db.VarChar(100)
  end_time   String   @db.VarChar(100)
  isActive   Boolean
  isStarted  Boolean  @default(false)
  course     course   @relation(fields: [course_id], references: [course_id], onDelete: Cascade, map: "FK TO COURSE FROM TEACHER_CLASS")
  teacher    teacher  @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade, map: "FK TO TEACHER FROM TEACHER_CLASS")

  @@index([course_id], map: "FK TO COURSE FROM TEACHER_CLASS")
  @@index([teacher_id], map: "FK TO TEACHER FROM TEACHER_CLASS")
}

enum course_day {
  SUN
  MON
  TUE
  WED
  THU
  FRI
  SAT
}

enum course_medium {
  Sinhala
  English
  Tamil
}

enum institute_teacher_status {
  active
  inactive
}

enum notification_read_status {
  read
  unread
}

enum parent_payment_month {
  Jan
  Feb
  Mar
  Apr
  May
  Jun
  Jul
  Aug
  Sep
  Oct
  Nov
  Dec
}

enum student_course_status {
  accepted
  pending
  rejected
}

enum student_payment_month {
  Jan
  Feb
  Mar
  Apr
  May
  Jun
  Jul
  Aug
  Sep
  Oct
  Nov
  Dec
}

enum student_payment_payment_status {
  paid
  unpaid
}

enum teacher_verification {
  pending
  verified
  rejected
}

enum teacher_requests_request_status {
  accepted
  rejected
  pending
}

enum user_type {
  student
  parent
  teacher
  institute
  admin
}

enum institute_verification {
  pending
  verified
  rejected
}

enum teacher_gender {
  male
  female
}

enum student_class_status {
  upcoming
  ended
  cancelled
}

enum student_class_online_status {
  online
  offline
}

{"version":3,"file":"react-headless-pagination.cjs.production.min.js","sources":["../src/hooks/usePagination.tsx","../src/Pagination.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { IPaginationProps, IUsePagination } from \"../Pagination.d\";\r\n\r\nconst usePagination = ({\r\n  currentPage,\r\n  setCurrentPage,\r\n  truncableText = \"...\",\r\n  truncableClassName = \"\",\r\n  totalPages,\r\n  edgePageCount = 2,\r\n  middlePagesSiblingCount = 1,\r\n}: IPaginationProps): IUsePagination => {\r\n  const pages = Array(totalPages)\r\n    .fill(0)\r\n    .map((_, i) => i + 1);\r\n\r\n  const hasPreviousPage = currentPage > 1;\r\n  const hasNextPage = currentPage < totalPages;\r\n\r\n  const isReachedToFirst = currentPage <= middlePagesSiblingCount;\r\n  const isReachedToLast = currentPage + middlePagesSiblingCount >= totalPages;\r\n\r\n  const middlePages = React.useMemo(() => {\r\n    const middlePageCount = middlePagesSiblingCount * 2 + 1;\r\n    if (isReachedToFirst) {\r\n      return pages.slice(0, middlePageCount);\r\n    }\r\n    if (isReachedToLast) {\r\n      return pages.slice(-middlePageCount);\r\n    }\r\n    return pages.slice(\r\n      currentPage - middlePagesSiblingCount,\r\n      currentPage + middlePagesSiblingCount + 1,\r\n    );\r\n  }, [currentPage, pages]);\r\n\r\n  const getAllPreviousPages = () => {\r\n    return pages.slice(0, middlePages[0] - 1);\r\n  };\r\n\r\n  const previousPages = React.useMemo(() => {\r\n    if (isReachedToFirst) {\r\n      return [];\r\n    }\r\n    if (getAllPreviousPages().length < 1) {\r\n      return [];\r\n    }\r\n    return pages\r\n      .slice(0, edgePageCount)\r\n      .filter((p) => !middlePages.includes(p));\r\n  }, [currentPage, pages]);\r\n\r\n  const getAllNextPages = React.useMemo(() => {\r\n    return pages.slice(\r\n      middlePages[middlePages.length - 1],\r\n      pages[pages.length],\r\n    );\r\n  }, [pages, middlePages]);\r\n\r\n  const nextPages = React.useMemo(() => {\r\n    if (isReachedToLast) {\r\n      return [];\r\n    }\r\n    if (getAllNextPages.length < 1) {\r\n      return [];\r\n    }\r\n    return pages\r\n      .slice(pages.length - edgePageCount, pages.length)\r\n      .filter((p) => !middlePages.includes(p));\r\n  }, [middlePages, pages]);\r\n\r\n  const isPreviousTruncable = React.useMemo(() => {\r\n    // Is truncable if first value of middlePage is larger than last value of previousPages\r\n    return middlePages[0] > previousPages[previousPages.length - 1] + 1;\r\n  }, [previousPages, middlePages]);\r\n\r\n  const isNextTruncable = React.useMemo(() => {\r\n    // Is truncable if last value of middlePage is larger than first value of previousPages\r\n    return middlePages[middlePages.length - 1] + 1 < nextPages[0];\r\n  }, [nextPages, middlePages]);\r\n\r\n  return {\r\n    currentPage,\r\n    setCurrentPage,\r\n    truncableText,\r\n    truncableClassName,\r\n    pages,\r\n    hasPreviousPage,\r\n    hasNextPage,\r\n    previousPages,\r\n    isPreviousTruncable,\r\n    middlePages,\r\n    isNextTruncable,\r\n    nextPages,\r\n  };\r\n};\r\n\r\nexport default usePagination;\r\n","import React, { FC } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport usePagination from \"./hooks/usePagination\";\r\nimport {\r\n  IPagination,\r\n  IPaginationProps,\r\n  ButtonProps,\r\n  PageButtonProps,\r\n} from \"./Pagination.d\";\r\n\r\nexport const PrevButton: FC<ButtonProps> = ({\r\n  className,\r\n  children,\r\n  ...buttonProps\r\n}) => {\r\n  const pagination: IPagination = React.useContext(PaginationContext);\r\n  const previous = () => {\r\n    if (pagination.currentPage + 1 > 1) {\r\n      pagination.setCurrentPage(pagination.currentPage - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className={className}\r\n      {...buttonProps}\r\n      onClick={() => previous()}\r\n      disabled={pagination.currentPage === 0}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport const NextButton: FC<ButtonProps> = ({\r\n  className,\r\n  children,\r\n  ...buttonProps\r\n}) => {\r\n  const pagination: IPagination = React.useContext(PaginationContext);\r\n  const next = () => {\r\n    if (pagination.currentPage + 1 < pagination.pages.length) {\r\n      pagination.setCurrentPage(pagination.currentPage + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className={className}\r\n      {...buttonProps}\r\n      onClick={() => next()}\r\n      disabled={pagination.currentPage === pagination.pages.length - 1}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\ninterface ITruncableElementProps {\r\n  prev?: boolean;\r\n}\r\n\r\nexport const TruncableElement: FC<ITruncableElementProps> = ({ prev }) => {\r\n  const pagination: IPagination = React.useContext(PaginationContext);\r\n\r\n  const {\r\n    isPreviousTruncable,\r\n    isNextTruncable,\r\n    truncableText = \"...\",\r\n    truncableClassName = \"\",\r\n  } = pagination;\r\n\r\n  return (isPreviousTruncable && prev === true) ||\r\n    (isNextTruncable && !prev) ? (\r\n    <span className={truncableClassName}>{truncableText}</span>\r\n  ) : null;\r\n};\r\n\r\nexport const PageButton: FC<PageButtonProps> = ({\r\n  className,\r\n  activeClassName = \"\",\r\n  inactiveClassName = \"\",\r\n}) => {\r\n  const pagination: IPagination = React.useContext(PaginationContext);\r\n\r\n  const renderPageButton = (page: number) => (\r\n    <span\r\n      key={page}\r\n      className={classNames(className, {\r\n        [activeClassName]: pagination.currentPage + 1 === page,\r\n        [inactiveClassName]: pagination.currentPage + 1 !== page,\r\n      })}\r\n      onClick={() => pagination.setCurrentPage(page - 1)}\r\n    >\r\n      {page}\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {pagination.previousPages.map(renderPageButton)}\r\n      <TruncableElement prev />\r\n      {pagination.middlePages.map(renderPageButton)}\r\n      <TruncableElement />\r\n      {pagination.nextPages.map(renderPageButton)}\r\n    </>\r\n  );\r\n};\r\n\r\nconst defaultState: IPagination = {\r\n  currentPage: 0,\r\n  setCurrentPage: () => {},\r\n  truncableText: \"...\",\r\n  truncableClassName: \"\",\r\n  pages: [],\r\n  hasPreviousPage: false,\r\n  hasNextPage: false,\r\n  previousPages: [],\r\n  isPreviousTruncable: false,\r\n  middlePages: [],\r\n  isNextTruncable: false,\r\n  nextPages: [],\r\n};\r\n\r\nconst PaginationContext: React.Context<IPagination> =\r\n  React.createContext(defaultState);\r\n\r\nexport const Pagination = (paginationProps: IPaginationProps) => {\r\n  const pagination = usePagination(paginationProps);\r\n\r\n  return (\r\n    <PaginationContext.Provider value={pagination}>\r\n      <div className={paginationProps.className}>\r\n        {paginationProps.children}\r\n      </div>\r\n    </PaginationContext.Provider>\r\n  );\r\n};\r\n\r\nPagination.PrevButton = PrevButton;\r\nPagination.NextButton = NextButton;\r\nPagination.PageButton = PageButton;\r\n"],"names":["PrevButton","className","children","buttonProps","pagination","React","useContext","PaginationContext","onClick","currentPage","setCurrentPage","disabled","NextButton","pages","length","TruncableElement","prev","truncableText","truncableClassName","isPreviousTruncable","isNextTruncable","PageButton","activeClassName","inactiveClassName","renderPageButton","page","key","classNames","previousPages","map","middlePages","nextPages","createContext","hasPreviousPage","hasNextPage","Pagination","paginationProps","totalPages","edgePageCount","middlePagesSiblingCount","isReachedToFirst","isReachedToLast","getAllNextPages","Array","fill","_","i","useMemo","middlePageCount","slice","filter","p","includes","Provider","value"],"mappings":"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"}